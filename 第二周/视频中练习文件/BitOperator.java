// 位运算
public class BitOperator{
	public static void main(String[] args){
		// 计算2&3
		// 1. 先得到 2的补码 => 2的原码 00000000 00000000 00000000 00000010
		//                      2的补码 00000000 00000000 00000000 00000010
		// 2. 得到 3的补码 => 3的原码 00000000 00000000 00000000 00000011
		//                    3的补码   00000000 00000000 00000000 00000011
		// 3. 按位与 &
		//		00000000 00000000 00000000 00000010
		// 		00000000 00000000 00000000 00000011
		// 		00000000 00000000 00000000 00000010 -> 运算后的补码
		//      运算后的原码也是一样，结果为2
		System.out.println(2&3);
		// 计算～-2
		// 1. 先得到 -2的原码 10000000 00000000 00000000 00000010
		// 2. 计算-2的反码	11111111 11111111 11111111 11111101
		// 3. -2的补码		11111111 11111111 11111111 11111110
		// 4. -2的补码取反	00000000 00000000 00000000 00000001 -> 运算后的补码
		// 正数运算后的原码也是一样，结果为1
		System.out.println(~-2);
		// 计算～2
		// 1. 先得到 2的原码 	00000000 00000000 00000000 00000010
		// 2. 计算2的补码		00000000 00000000 00000000 00000010
		// 3. 取反			11111111 11111111 11111111 11111101 -> 运算后的补码
		// 4. 运算后的反码	11111111 11111111 11111111 11111100
		// 5. 运算后的原码	10000000 00000000 00000000 00000011
		// 6. 结果为-3
		System.out.println(~2);
		

	
	}
}